{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "import math\n",
    "import random \n",
    "\n",
    "import itertools\n",
    "\n",
    "\n",
    "def loadData(directory):\n",
    "    \"\"\"\n",
    "        Takes as input the directory of the dataset. \n",
    "        Outputs two pandas frames: ratings and movies.\n",
    "    \"\"\"\n",
    "    ratings = pd.read_csv(directory + '/ratings.csv', usecols=['userId', 'movieId', 'rating'])\n",
    "    movies = pd.read_csv(directory + 'movies.csv')\n",
    "    return ratings, movies\n",
    "\n",
    "def visualizeData(ratings, movies):\n",
    "    print('Ratings is a {} Frame'.format(ratings.shape))\n",
    "    print(ratings.head())\n",
    "    print('\\n')\n",
    "    print(ratings.describe())\n",
    "    print('\\n')\n",
    "    print('Movies is a {} Frame'.format(movies.shape))\n",
    "    print(movies.head())\n",
    "    \n",
    "    nUsers = len(ratings['userId'].unique())\n",
    "    print(\"There are {} users in the dataset.\".format(nUsers))\n",
    "    nMovies = len(movies['movieId'].unique())\n",
    "    print(\"There are {} movies in the dataset.\".format(nMovies))\n",
    "    \n",
    "    ratings['rating'].hist(bins=50)\n",
    "    \n",
    "def Df2Numpy(ratings):\n",
    "    ratingsMatrix = ratings.pivot(index='userId', columns='movieId', values='rating')\n",
    "    ratingsMatrix = ratingsMatrix.fillna(0)\n",
    "    R = ratingsMatrix.to_numpy()\n",
    "    return R\n",
    "    \n",
    "class MatrixFactorization():\n",
    "    \"\"\"\n",
    "        A Simple Matrix Factorization Class.\n",
    "        Assumes ratings is a n x m Numpy Array. \n",
    "        nFactors is the intermediate dimension k of the Matrices U and V.\n",
    "        lambdaReg and muReg are regularization parameters.\n",
    "        Blabla..\n",
    "    \"\"\"\n",
    "    def __init__(self, ratings, nFactors=10, lambdaReg=0.0, muReg=0.0, alpha=0.01, maxIter=100, epsilon=0.001, trainFrac=0.8, valFrac=0.1, testFrac=0.1):\n",
    "        self.R = ratings\n",
    "        self.nFactors = nFactors\n",
    "        self.lambdaReg = lambdaReg\n",
    "        self.muReg = muReg\n",
    "        self.nUsers, self.nMovies = ratings.shape\n",
    "        self.alpha = alpha\n",
    "        self.maxIter = maxIter\n",
    "        self.U = np.random.normal(size=(self.nUsers, self.nFactors))\n",
    "        self.V = np.random.normal(size=(self.nMovies, self.nFactors))\n",
    "        self.samples = self.matrix2Samples(ratings)\n",
    "        self.epsilon = epsilon\n",
    "        self.trainFrac = trainFrac\n",
    "        self.valFrac = valFrac\n",
    "        self.testFrac = testFrac\n",
    "        \n",
    "    def randomInit(self):\n",
    "        self.U = np.random.normal(size=(self.nUsers, self.nFactors))\n",
    "        self.V = np.random.normal(size=(self.nMovies, self.nFactors))\n",
    "        \n",
    "    def matrix2Samples(self, R):\n",
    "        samples = [(i, j, R[i,j]) for i in range(self.nUsers)\n",
    "           for j in range(self.nMovies) if R[i,j] > 0]\n",
    "        return samples\n",
    "    \n",
    "    def Samples2Matrix(self, samples, m, n):\n",
    "        matrix = np.zeros(m, n)\n",
    "        for s in samples:\n",
    "            i, j, v = s\n",
    "            matrix[i, j] = v\n",
    "        return matrix\n",
    "    \n",
    "    \n",
    "    def splitTrainValTest(self):\n",
    "        # Shuffle the samples and sends back a partition for training, validation and testing\n",
    "        random.shuffle(self.samples)\n",
    "        nSamples = len(self.samples)\n",
    "        e1 = math.floor(self.trainFrac * nSamples)\n",
    "        e2 = math.floor(self.trainFrac * nSamples) + math.floor(self.valFrac * nSamples) \n",
    "        \n",
    "        trainSamples, valSamples, testSamples = self.samples[:e1], self.samples[e1:e2], self.samples[e2:]\n",
    "        \n",
    "        # Check if no lost examples\n",
    "        if nSamples != len(trainSamples) + len(valSamples) + len(testSamples):\n",
    "            print('ERROR')\n",
    "        \n",
    "        return trainSamples, valSamples, testSamples\n",
    "    \n",
    "    def trainValTestIdx(self):\n",
    "        # Returns a partitions of indices \n",
    "        nSamples = len(self.samples)\n",
    "        interval = range(nSamples)\n",
    "        random.shuffle(interval)\n",
    "        \n",
    "        e1 = math.floor(self.trainFrac * nSamples)\n",
    "        e2 = math.floor(self.trainFrac * nSamples) + math.floor(self.valFrac * nSamples) \n",
    "        \n",
    "        trainIdx, valIdx, testIdx = interval[:e1], interval[e1:e2], interval[e2:]\n",
    "        \n",
    "        # Check if no lost examples\n",
    "        if nSamples != len(trainSamples) + len(valSamples) + len(testSamples):\n",
    "            print('ERROR')\n",
    "        \n",
    "        return trainIdx, valIdx, testIdx\n",
    "    \n",
    "    #def stochasticGradientDescentPass(self, R, U, V, alpha, lambdaReg, muReg, nFactors):\n",
    "    #    for i in range(R.shape[0]):\n",
    "    #        for j in range(R.shape[1]):\n",
    "    #            if R[i, j] > 0:\n",
    "    #                r_hat_ij = np.dot(U[i, :], V.T[:, j])\n",
    "    #                eij = R[i, j] - r_hat_ij\n",
    "    #                for q in range(nFactors):\n",
    "    #                    U[i, q] = U[i, q] + alpha * (eij * V[j, q] - lambdaReg * U[i, q])\n",
    "    #                    V[j, q] = V[j, q] + alpha * (eij * U[i, q] - muReg * V[j, q])\n",
    "    #    return U, V\n",
    "\n",
    "    def stochasticGradientDescentPass(self, trainSamples):\n",
    "        for s in trainSamples:\n",
    "            i, j, _ = s\n",
    "            r_hat_ij = np.dot(self.U[i, :], self.V.T[:, j])\n",
    "            eij = self.R[i, j] - r_hat_ij\n",
    "            for q in range(self.nFactors):\n",
    "                self.U[i, q] = self.U[i, q] + self.alpha * (eij * self.V[j, q] - self.lambdaReg * self.U[i, q])\n",
    "                self.V[j, q] = self.V[j, q] + self.alpha * (eij * self.U[i, q] - self.muReg * self.V[j, q])\n",
    "            \n",
    "        return self.U, self.V\n",
    "\n",
    "    def gridSearch(self, factors, alphas, lambdaRegs, muRegs):\n",
    "        lowest_error = math.inf\n",
    "        best_config = None\n",
    "        bestSolution = (None, None)\n",
    "        for config in itertools.product(factors, alphas, lambdaRegs, muRegs):\n",
    "            self.nFactors, self.alpha, self.lambdaReg, self.muReg = config\n",
    "            U, V, history = self.stochasticGradientDescent(False)\n",
    "            if history['valError'] < lowest_error:\n",
    "                lowest_error = history['valError']\n",
    "                best_config = config\n",
    "                bestSolution = (U, V)\n",
    "                \n",
    "        self.U, self.V = bestSolution    # Just for consistency \n",
    "        \n",
    "        return U, V, best_config\n",
    "            \n",
    "            \n",
    "    def stochasticGradientDescent(self, logging=True):\n",
    "        history = {'trainErrors':[], 'valErrors':[]}\n",
    "        self.randomInit()\n",
    "        trainSamples, valSamples, testSamples = self.splitTrainValTest()  # This should probably be outside ?\n",
    "        for i in range(self.maxIter):\n",
    "            # I think we should shuffle the data here. \n",
    "            random.shuffle(trainSamples)\n",
    "            U, V = self.stochasticGradientDescentPass(trainSamples)\n",
    "            trainError = self.computeTotalErrorSamples(trainSamples)\n",
    "            \n",
    "            if logging:\n",
    "                valError = self.computeTotalErrorSamples(valSamples)\n",
    "                history['trainErrors'].append(trainError)\n",
    "                history['valErrors'].append(valError)\n",
    "            if trainError < self.epsilon:\n",
    "                break\n",
    "        \n",
    "        history['trainError'] = self.computeTotalErrorSamples(trainSamples)\n",
    "        history['valError'] = self.computeTotalErrorSamples(valSamples)\n",
    "\n",
    "        return U, V, history\n",
    "\n",
    "\n",
    "    def computeTotalErrorSamples(self, data):\n",
    "        error = 0\n",
    "        for s in data:\n",
    "            i, j, _ = s\n",
    "            error += (R[i, j] - np.dot(self.U[i, :], self.V.T[:, j])) ** 2\n",
    "        return error / len(data)\n",
    "\n",
    "    def plotHistory(self, history): \n",
    "        plt.plot(history['trainErrors'], label='Training Error')\n",
    "        plt.plot(history['valErrors'], label='Validation Error')\n",
    "        plt.title('Evolution of the Loss')\n",
    "        plt.ylabel('Loss Func')\n",
    "        plt.xlabel('Iteration')\n",
    "        plt.legend()\n",
    "        plt.show()\n",
    "        \n",
    "    def computeApproximatedMatrix(self, U, V):\n",
    "        return np.dot(U, V.T)\n",
    "    \n",
    "# Generates a rank(k) matrix. Should add some noise..    \n",
    "def syntheticMatrix(m, n, k):\n",
    "    basis = np.random.randint(3, size=(m, k))\n",
    "    matrix = np.zeros((m, n))\n",
    "    coeffs = np.random.randint(4, size=k)\n",
    "    \n",
    "    for i in range(n):\n",
    "        coeffs = np.random.randint(4, size=k)\n",
    "        matrix[:, i] = sum([coeffs[j] * basis[:, j] for j in range(k)]) # TODO: + some small noise vector\n",
    "         \n",
    "    return matrix\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ratings is a (100836, 3) Frame\n",
      "   userId  movieId  rating\n",
      "0       1        1     4.0\n",
      "1       1        3     4.0\n",
      "2       1        6     4.0\n",
      "3       1       47     5.0\n",
      "4       1       50     5.0\n",
      "\n",
      "\n",
      "              userId        movieId         rating\n",
      "count  100836.000000  100836.000000  100836.000000\n",
      "mean      326.127564   19435.295718       3.501557\n",
      "std       182.618491   35530.987199       1.042529\n",
      "min         1.000000       1.000000       0.500000\n",
      "25%       177.000000    1199.000000       3.000000\n",
      "50%       325.000000    2991.000000       3.500000\n",
      "75%       477.000000    8122.000000       4.000000\n",
      "max       610.000000  193609.000000       5.000000\n",
      "\n",
      "\n",
      "Movies is a (9742, 3) Frame\n",
      "   movieId                               title  \\\n",
      "0        1                    Toy Story (1995)   \n",
      "1        2                      Jumanji (1995)   \n",
      "2        3             Grumpier Old Men (1995)   \n",
      "3        4            Waiting to Exhale (1995)   \n",
      "4        5  Father of the Bride Part II (1995)   \n",
      "\n",
      "                                        genres  \n",
      "0  Adventure|Animation|Children|Comedy|Fantasy  \n",
      "1                   Adventure|Children|Fantasy  \n",
      "2                               Comedy|Romance  \n",
      "3                         Comedy|Drama|Romance  \n",
      "4                                       Comedy  \n",
      "There are 610 users in the dataset.\n",
      "There are 9742 movies in the dataset.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ratings, movies = loadData('Data/')\n",
    "visualizeData(ratings, movies)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3, 0.01, 0.01, 0.01)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "R = syntheticMatrix(20, 8, 3)\n",
    "\n",
    "mf = MatrixFactorization(R, nFactors=3, lambdaReg=1.0, muReg=1.0)\n",
    "U, V, best_config = mf.gridSearch(factors=[1, 3, 5, 10], alphas=[0.0001, 0.001, 0.01], lambdaRegs=[0.01, 0.1, 1.0], muRegs=[0.01, 0.1, 1.0])\n",
    "print(best_config)\n",
    "U, V, history = mf.stochasticGradientDescent(True)\n",
    "mf.plotHistory(history)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
